import { AItemContext } from '@/AItemContext';
import { useAItem } from '@/AItemProvider';
import { useCItemAdapter } from '@/contained/CItemAdapter';
import { CItemAdapterContextType } from '@/contained/CItemAdapterContext';
import { CItemsContextType } from '@/contained/CItemsContext';
import { CItemsFind } from '@/contained/CItemsFind';
import { CacheMap } from '@fjell/cache';
import { Item, LocKeyArray } from '@fjell/core';
import { render } from '@testing-library/react';
import React from 'react';
import { vi } from 'vitest';

vi.mock('@/contained/CItemAdapter');
vi.mock('@/AItemProvider');

interface TestItem extends Item<'test', 'container'> {
  name: string;
}

describe('CItemsFind', () => {

  let mockCacheMap: ReturnType<typeof vi.fn>;
  let mockAdapter: ReturnType<typeof vi.fn>;
  let mockParentAdapter: ReturnType<typeof vi.fn>;

  let adapterContext: React.Context<CItemAdapterContextType<TestItem, 'test', 'container'> | undefined>;
  let parentContext: React.Context<AItemContext<Item<"container">, "container"> | undefined>;
  let testContext: React.Context<CItemsContextType<TestItem, 'test', 'container'> | undefined>;

  let TestItemsFind: React.FC<{ children?: React.ReactNode }>;
  beforeEach(() => {
    vi.resetAllMocks();

    mockCacheMap = {
      get: vi.fn(),
      set: vi.fn(),
      delete: vi.fn(),
      has: vi.fn(),
      size: vi.fn(),
    } as unknown as ReturnType<typeof vi.fn>;

    mockAdapter = {
      cacheMap: mockCacheMap,
      pkType: 'test',
      all: vi.fn(),
      one: vi.fn(),
      create: vi.fn(),
      update: vi.fn(),
      remove: vi.fn(),
      allAction: vi.fn(),
      find: vi.fn(),
      name: 'mockAdapter',
      get: vi.fn(),
      retrieve: vi.fn(),
      action: vi.fn(),
    } as unknown as ReturnType<typeof vi.fn>;
    
    mockParentAdapter = {
      locations: [{ kt: 'container', lk: 'location1' }],
      item: { id: 'parent1', name: 'Parent Item' },
    } as unknown as ReturnType<typeof vi.fn>;

    (vi.fn() as any).mockReturnValue(mockAdapter);
    (vi.fn() as any).mockReturnValue(mockParentAdapter);
    
    adapterContext =
      // eslint-disable-next-line no-undefined
      React.createContext<CItemAdapterContextType<TestItem, 'test', 'container'> | undefined>(undefined);
    parentContext =
      // eslint-disable-next-line no-undefined
      React.createContext<AItemContext<Item<"container">, "container"> | undefined>(undefined);
    testContext =
      // eslint-disable-next-line no-undefined
      React.createContext<CItemsContextType<TestItem, 'test', 'container'> | undefined>(undefined);
    
    TestItemsFind = (
      {
        children,
      }: {
        children?: React.ReactNode;
      }
    ) => {
      return CItemsFind<
        TestItem,
        "test",
        "container"
      >({
        name: 'test',
        parent: parentContext as unknown as AItemContext<Item<"container">, "container">,
        adapter: adapterContext,
        context: testContext,
        children,
        finder: 'testFinder',
        finderParams: {},
      });
    };

  });

  it('should render children', () => {
    const { getByText } = render(
      <TestItemsFind>
        <div>Child Component</div>
      </TestItemsFind>
    );

    expect(getByText('Child Component')).toBeInTheDocument();
  });

  it('test with default children and finder params', () => {

    TestItemsFind = () => {
      return CItemsFind<
        TestItem,
        "test",
        "container"
      >({
        name: 'test',
        parent: parentContext as unknown as AItemContext<Item<"container">, "container">,
        adapter: adapterContext,
        context: testContext,
        finder: 'testFinder',
      });
    };

    render(
      <TestItemsFind>
      </TestItemsFind>
    );

  });

});
